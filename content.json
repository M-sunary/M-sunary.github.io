[{"title":"终于等到你","date":"2017-03-13T14:30:27.000Z","path":"2017/03/13/终于等到你/","text":"时隔七年，我看到你了。我们算是翻篇了。谢谢~","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"11年母校的足球场","date":"2017-03-09T17:27:06.000Z","path":"2017/03/10/11年母校的足球场/","text":"","tags":[{"name":"瞬间","slug":"瞬间","permalink":"http://yoursite.com/tags/瞬间/"}]},{"title":"我恋上这座城","date":"2017-02-27T15:00:44.000Z","path":"2017/02/27/我恋上这座城/","text":"2013.07.06我踏上了这座城，魔都。抱着一颗追寻初恋的心，因为我的初恋也在这里。时隔三年没见，我想她了，我想看看她。 然而来了也并没有勇气，去开口，去打扰她现在的生活。 心里想着等等吧等我在这座城里站稳了脚跟，等我能养活自己，也有能力养活她的时候 这一等，就是四个年头。她，结婚了。 四年，在这里除了养活自己 啥都没干。但是我喜欢上了这座城，因为在这里我能跟你呼吸一样的空气，尽管都是霾。 从我们分手 七年整了。我还想你。很想很想","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Leetcode修炼之路-02","date":"2017-02-11T15:54:28.000Z","path":"2017/02/11/Leetcode修炼之路-02/","text":"题目：Reverse digits of an integer. Example1: x = 123, return 321 Example2: x = -123, return -321 Note: The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows. 题目大意：输入一个整型数字，取它的逆序输出（输入:123 ,要求输出为 321）提示：如果输入数字超出整型数范围( -2^15 到 2^15-1)，则返回 0 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.yu.sun.leetcode.palindrome;public class ReverseInteger &#123; /** * 解题思路： * 1.判断输入的数字是否小于0： * 将输入数字的绝对值 逆反，如果小于0，则逆反后乘以-1返回，大于0则直接返回； * 2.输入数字超出整型范围直接返回 0; * 取数字逆反思路： * a.判断输入的数字是几位数； * b.将输入数字的位数作为循环的基数digitSize， * 循环中取出输入数的每一位上的数字， * 假如输入的数字为:x = abcde ,五位数 * 则for循环如下： * for(int n=0;n&lt; digitSize(x);n++)&#123; * int baseDigit = x%(int)Math.pow(10,n+1)/Math.pow(10,n);//取得输入数字每一位上的数； * baseDigit * (int)Math.pow(10,digitSize(x)-n-1);//将取出的数字乘以10的(位数减n再减1)次方,循环从0开始的 * &#125; * @param args */ public static void main(String[] args) &#123; // TODO Auto-generated method stub int x = 123124; int numSize = 0; ReverseInteger reverseInteger = new ReverseInteger(); if(x&lt;Integer.MAX_VALUE &amp;&amp; x&gt;Integer.MIN_VALUE)&#123; numSize = reverseInteger.getDigitSize(x); int reverseX = reverseInteger.getDigitReverse(x, numSize); System.out.println(reverseX); &#125;else&#123; System.out.println(\"输入数字超出整型数范围，结果为：\"+0); &#125; &#125; public int getDigitReverse(int x,int numSize)&#123; int reverseX = 0; if(x&lt;0)&#123; for(int i=0;i&lt;numSize;i++)&#123; int baseDigit = 0; baseDigit = (int)((Math.abs(x) % (int)Math.pow(10, i+1)) / (int)Math.pow(10, i)); reverseX += (baseDigit * (int)Math.pow(10, numSize-i-1)); &#125; return reverseX*-1; &#125;else&#123; for(int i=0;i&lt;numSize;i++)&#123; int baseDigit = 0; baseDigit = (int)((x % (int)Math.pow(10, i+1)) / (int)Math.pow(10, i)); reverseX += (baseDigit * (int)Math.pow(10, numSize-i-1)); &#125; return reverseX; &#125; &#125; public int getDigitSize(int x)&#123; int digitSize = 0; while(x!=0)&#123; x /= 10; digitSize ++; &#125; return digitSize; &#125;&#125;","tags":[{"name":"生计","slug":"生计","permalink":"http://yoursite.com/tags/生计/"}]},{"title":"Leetcode修炼之路-01","date":"2017-02-09T16:33:27.000Z","path":"2017/02/10/Leetcode修炼之路-01/","text":"题目：Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. 题目大意：给定一个整数数组，返回数组中两个数的索引，使它们相加等于目标数。 示例： 123Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.yu.sun.leetcode.palindrome;import java.util.HashMap;import java.util.Map;/** * 给定一个整型数组 和 一个目标值， * 从数组中找出两个值相加等于目标值(Target)，返回这两个值的索引(Indices) * 思路： * step1:定义一个长度为2的数组来存储\"符合要求的数组索引\",该数组称作 结果集，int[] resultArr = new int[2]; * 定义一个map用来存放数组的值和索引，key = arr[index], value =index, * 这么做是为了利用map.containsKey()这个函数来找剩下的一个值 * step2:依次取出源数组sourceArr[]中的值，如果当前值 x 比目标值 target 小, * 则将当前值的索引放到结果集中,即resultArr[0] = i; * step3:在循环中利用map.containsKey()的函数找寻剩下另一个符合 target-nums[i]的值。 * step4:如果找到直接return,没找到继续循环，直至结束 * @author yu.sun * */public class IndicesToTarget &#123; public static void main(String[] args)&#123; int nums[] = &#123;3,2,4&#125;; int target = 7; IndicesToTarget indicesToTarget = new IndicesToTarget(); System.out.println(indicesToTarget.twoSum(nums, target)[0]); System.out.println(indicesToTarget.twoSum(nums, target)[1]); &#125; public int[] twoSum(int[] nums, int target) &#123; int[] retArr = new int[2]; Map&lt;Integer,Integer&gt; map = new HashMap&lt;Integer,Integer&gt;(); for(int i=0;i&lt;nums.length;i++)&#123; if(map.containsKey(target - nums[i]))&#123; retArr[0] = i; retArr[1] = map.get(target - nums[i]); return retArr; &#125; map.put(nums[i], i); &#125; return retArr; &#125;&#125;","tags":[{"name":"生计","slug":"生计","permalink":"http://yoursite.com/tags/生计/"}]},{"title":"bash使用ssh实现免密码登陆","date":"2016-08-23T06:57:26.000Z","path":"2016/08/23/bash使用ssh实现免密码登陆/","text":"SSH免密码登录1 打开一个文件，如叫pf2 写入下面内容，把yu.sun 和 * 换成自己名字和密码。3 chmod 740 pf4 ./pf脚本如下，例如：1234567#!/usr/bin/expect -f#auto ssh loginset timeout 30spawn ssh yu.sun@127.0.0.1expect \"password:\"send \"***\\r\"interact 相关资料： http://www.ahlinux.com/shell/5797.html","tags":[{"name":"生计","slug":"生计","permalink":"http://yoursite.com/tags/生计/"}]}]